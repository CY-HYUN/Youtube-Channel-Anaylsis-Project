version: '3.8'

services:
  # Main YouTube Analytics Application
  youtube-analytics:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: production
    container_name: youtube-analytics-app
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/analytics.db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS=${WORKERS:-4}
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../visualizations:/app/visualizations
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - postgres
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: youtube-analytics-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for production data storage
  postgres:
    image: postgres:15.4-alpine
    container_name: youtube-analytics-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-youtube_analytics}
      POSTGRES_USER: ${POSTGRES_USER:-analytics_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-analytics_user} -d ${POSTGRES_DB:-youtube_analytics}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:1.25-alpine
    container_name: youtube-analytics-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ../visualizations:/var/www/html/visualizations
    depends_on:
      - youtube-analytics
    networks:
      - analytics-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: youtube-analytics-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - analytics-network

  # Grafana for visualization dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: youtube-analytics-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-secure_admin_password}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - analytics-network

  # Background task worker
  celery-worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: production
    container_name: youtube-analytics-worker
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/analytics.db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../visualizations:/app/visualizations
    depends_on:
      - redis
      - postgres
    networks:
      - analytics-network
    command: celery -A src.tasks worker --loglevel=info --concurrency=4

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: production
    container_name: youtube-analytics-scheduler
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/analytics.db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - analytics-network
    command: celery -A src.tasks beat --loglevel=info

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  analytics-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16